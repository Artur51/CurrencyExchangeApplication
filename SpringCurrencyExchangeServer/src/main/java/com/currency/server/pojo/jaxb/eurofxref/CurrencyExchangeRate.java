//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.10.18 at 10:39:16 AM EEST 
//

package com.currency.server.pojo.jaxb.eurofxref;

import lombok.Data;

import java.math.BigDecimal;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.validation.constraints.Positive;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import org.springframework.util.NumberUtils;
import org.springframework.validation.annotation.Validated;

import com.currency.server.services.CurrencyExchangeService;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * <p>
 * Java class for CurrencyExchangeRate complex type.
 *
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="CurrencyExchangeRate"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="currency" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="rate" type="{http://www.w3.org/2001/XMLSchema}float" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CurrencyExchangeRate")
@Data
@Entity
@Validated
@JsonIgnoreProperties(value = {"parent", "id"})
public class CurrencyExchangeRate {
    public CurrencyExchangeRate() {

    }

    public CurrencyExchangeRate(String currency, String rate) {
        this.currency = currency;
        this.rate = NumberUtils.parseNumber(rate, BigDecimal.class);
    }

    @Id
    @GeneratedValue
    Integer id;

    @XmlAttribute(name = "currency")
    protected String currency;
    @XmlAttribute(name = "rate")
    @Positive
    @Column(precision = 19, scale = 5, insertable = true, updatable = false)
    protected BigDecimal rate;

    @ManyToOne
    @JoinColumn(name = "parent_id", referencedColumnName = "time", nullable = false)
    @XmlTransient
    CurrencyExchangeTimeAndRates parent;


    /**
     * Flag to client not to show item in list
     */
    @JsonProperty
    @JsonInclude(JsonInclude.Include.NON_DEFAULT)
    public boolean isInExchangeListHidden() {
        return CurrencyExchangeService.EURO_CURRENCY_NAME.equals(currency);
    }

    public void setInExchangeListHidden(
            boolean value) {
        // ignored.
    }

    /**
     * Gets the value of the currency property.
     *
     * @return possible object is
     * {@link String }
     */
    public String getCurrency() {
        return currency;
    }

    /**
     * Sets the value of the currency property.
     *
     * @param value allowed object is
     *              {@link String }
     */
    public void setCurrency(
            String value) {
        this.currency = value;
    }

    /**
     * Gets the value of the rate property.
     *
     * @return possible object is
     * {@link Float }
     */
    public BigDecimal getRate() {
        return rate;
    }

    /**
     * Sets the value of the rate property.
     *
     * @param value allowed object is
     *              {@link Float }
     */
    public void setRate(
            BigDecimal value) {
        this.rate = value;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("CurrencyExchangeRate [id=");
        builder.append(id);
        builder.append(", currency=");
        builder.append(currency);
        builder.append(", rate=");
        builder.append(rate);
        builder.append(", time=");
        if (parent != null) {
            builder.append(parent.getTime());
        } else {
            builder.append("no parent");
        }
        builder.append("]");
        return builder.toString();
    }

}
